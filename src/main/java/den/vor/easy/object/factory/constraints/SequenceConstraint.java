package den.vor.easy.object.factory.constraints;


import den.vor.easy.object.parser.ExpressionEvaluator;
import den.vor.easy.object.value.impl.MapValue;

/**
 * Specifies constraints for {@link den.vor.easy.object.factory.ComparableFactory}
 * @param <T> type of object generated by the factory
 */
public abstract class SequenceConstraint<T extends Comparable<? super T>> {

    private final ExpressionEvaluator expressionEvaluator;

    /**
     * Creates a new constraint instance
     * @param constraint expression that returns constraint
     */
    protected SequenceConstraint(String constraint) {
        this.expressionEvaluator = new ExpressionEvaluator(constraint);
    }

    /**
     * Applies constraint on given {@link SequenceConstraintsValues<T>}
     */
    public abstract SequenceConstraintsValues<T> apply(SequenceConstraintsValues<T> constraintsValues, T value);

    public ExpressionEvaluator getExpressionEvaluator() {
        return expressionEvaluator;
    }
}
