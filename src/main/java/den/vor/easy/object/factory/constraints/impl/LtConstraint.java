package den.vor.easy.object.factory.constraints.impl;

import den.vor.easy.object.factory.constraints.Bound;
import den.vor.easy.object.factory.constraints.SequenceConstraint;
import den.vor.easy.object.factory.constraints.SequenceConstraintsValues;

/**
 * Less-than constraint (<).
 * Is applied to the upper bound. Newly set bound is <b>exclusive</b>
 * @param <T> type of object, generated by the factory
 */
public class LtConstraint<T extends Comparable<? super T>> extends SequenceConstraint<T> {

    public LtConstraint(String constraint) {
        super(constraint);
    }

    @Override
    public SequenceConstraintsValues<T> apply(SequenceConstraintsValues<T> constraintsValues, T value) {
        if (value.compareTo(constraintsValues.getMax().getValue()) <= 0) {
            constraintsValues.setMax(new Bound<>(value, false));
        }
        return constraintsValues;
    }
}