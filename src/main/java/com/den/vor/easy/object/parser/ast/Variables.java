/*
 * Copyright (c) 2020-2021 Danila Varatyntsev
 *
 * Licensed under the MIT License (the "License");
 * you may not use this file except in compliance with the License.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.den.vor.easy.object.parser.ast;

import com.den.vor.easy.object.factory.RootFactory;
import com.den.vor.easy.object.value.Value;
import com.den.vor.easy.object.value.impl.MapValue;
import com.den.vor.easy.object.value.impl.NullValue;
import com.den.vor.easy.object.value.impl.StringValue;

import java.util.HashMap;
import java.util.Map;

/**
 * Contains variables that are available during expression evaluation.
 * Has 3 different levels of variables (in descending priority):
 *  * Context - unique for each object generated. Contains all dependencies ({@code parent.a})
 *  * Global variables - common for all objects generated by one {@link RootFactory}.
 *    Contains variables like the total number of objects generated.
 *  * Constants - common functions and constants that never change. Examples - {@code pi}, {@code int('123')}, etc.
 */
public class Variables {

    private static final Map<StringValue, Value<?>> CONST_VALUES;

    static {
        Map<StringValue, Value<?>> consts = new HashMap<>();
        consts.put(StringValue.of("pi"), Constants.PI);
        consts.put(StringValue.of("int"), Constants.INT);
        consts.put(StringValue.of("now"), Constants.NOW);
        CONST_VALUES = Map.copyOf(consts);
    }

    private final MapValue globalVariables;
    private final Value<?> context;

    public Variables(MapValue globalVariables, Value<?> context) {
        this.globalVariables = globalVariables;
        this.context = context;
    }

    /**
     * Gets a variable by the specified key.
     * If the variable not found on all 3 levels, returns {@link NullValue} instance.
     * @param key key to search
     * @return variable if exists, {@link NullValue} otherwise
     */
    public Value<?> getVariable(StringValue key) {
        Value<?> value = getNullableConst(key);
        if (value == null) {
            value = context.get(key);
        }
        if (value == null) {
            value = NullValue.NULL;
        }
        return value;
    }

    /**
     * Tries to find variable on 2 lower levels (global variables and constants).
     * Returns {@code null} if variable does not exist.
     * @param key key to search
     * @return variable if exists, {@code null} otherwise
     */
    public Value<?> getNullableConst(StringValue key) {
        Value<?> value = CONST_VALUES.get(key);
        if (value == null) {
            value = globalVariables.get(key);
        }
        return value;
    }

    /**
     * @return current context
     */
    public Value<?> getContext() {
        return context;
    }
}
